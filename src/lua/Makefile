# Makefile.in generated by automake 1.11.3 from Makefile.am.
# src/lua/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011 Free Software
# Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




pkgdatadir = $(datadir)/lconvert
pkgincludedir = $(includedir)/lconvert
pkglibdir = $(libdir)/lconvert
pkglibexecdir = $(libexecdir)/lconvert
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
subdir = src/lua
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
LIBRARIES = $(noinst_LIBRARIES)
AR = ar
ARFLAGS = cru
liblua_a_AR = $(AR) $(ARFLAGS)
liblua_a_LIBADD =
am_liblua_a_OBJECTS = liblua_a-lapi.$(OBJEXT) liblua_a-lcode.$(OBJEXT) \
	liblua_a-lctype.$(OBJEXT) liblua_a-ldebug.$(OBJEXT) \
	liblua_a-ldo.$(OBJEXT) liblua_a-ldump.$(OBJEXT) \
	liblua_a-lfunc.$(OBJEXT) liblua_a-lgc.$(OBJEXT) \
	liblua_a-llex.$(OBJEXT) liblua_a-lmem.$(OBJEXT) \
	liblua_a-lobject.$(OBJEXT) liblua_a-lopcodes.$(OBJEXT) \
	liblua_a-lparser.$(OBJEXT) liblua_a-lstate.$(OBJEXT) \
	liblua_a-lstring.$(OBJEXT) liblua_a-ltable.$(OBJEXT) \
	liblua_a-ltm.$(OBJEXT) liblua_a-lundump.$(OBJEXT) \
	liblua_a-lvm.$(OBJEXT) liblua_a-lzio.$(OBJEXT) \
	liblua_a-lauxlib.$(OBJEXT) liblua_a-lbaselib.$(OBJEXT) \
	liblua_a-lbitlib.$(OBJEXT) liblua_a-lcorolib.$(OBJEXT) \
	liblua_a-ldblib.$(OBJEXT) liblua_a-liolib.$(OBJEXT) \
	liblua_a-lmathlib.$(OBJEXT) liblua_a-loslib.$(OBJEXT) \
	liblua_a-lstrlib.$(OBJEXT) liblua_a-ltablib.$(OBJEXT) \
	liblua_a-loadlib.$(OBJEXT) liblua_a-linit.$(OBJEXT)
liblua_a_OBJECTS = $(am_liblua_a_OBJECTS)
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
SOURCES = $(liblua_a_SOURCES)
DIST_SOURCES = $(liblua_a_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/ljq/git/lconvert/missing --run aclocal-1.11
AMTAR = $${TAR-tar}
AUTOCONF = ${SHELL} /home/ljq/git/lconvert/missing --run autoconf
AUTOHEADER = ${SHELL} /home/ljq/git/lconvert/missing --run autoheader
AUTOMAKE = ${SHELL} /home/ljq/git/lconvert/missing --run automake-1.11
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPPFLAGS = 
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EXEEXT = 
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS = 
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/ljq/git/lconvert/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
OBJEXT = o
PACKAGE = lconvert
PACKAGE_BUGREPORT = jianqiang070@foxmail.com
PACKAGE_NAME = lconvert
PACKAGE_STRING = lconvert 0.0.1
PACKAGE_TARNAME = lconvert
PACKAGE_URL = 
PACKAGE_VERSION = 0.0.1
PATH_SEPARATOR = :
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/sh
STRIP = 
VERSION = 0.0.1
abs_builddir = /home/ljq/git/lconvert/src/lua
abs_srcdir = /home/ljq/git/lconvert/src/lua
abs_top_builddir = /home/ljq/git/lconvert
abs_top_srcdir = /home/ljq/git/lconvert
ac_ct_CC = gcc
ac_ct_CXX = g++
am__include = include
am__leading_dot = .
am__quote = 
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
bindir = ${exec_prefix}/bin
build_alias = 
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host_alias = 
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/ljq/git/lconvert/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../../
top_builddir = ../..
top_srcdir = ../..
noinst_LIBRARIES = liblua.a
liblua_a_SOURCES = \
lapi.c \
lcode.c \
lctype.c \
ldebug.c \
ldo.c \
ldump.c \
lfunc.c \
lgc.c \
llex.c \
lmem.c \
lobject.c \
lopcodes.c \
lparser.c \
lstate.c \
lstring.c \
ltable.c \
ltm.c \
lundump.c \
lvm.c \
lzio.c \
lauxlib.c \
lbaselib.c \
lbitlib.c \
lcorolib.c \
ldblib.c \
liolib.c \
lmathlib.c \
loslib.c \
lstrlib.c \
ltablib.c \
loadlib.c \
linit.c

liblua_a_CPPFLAGS = -DLUA_COMPAT_ALL -DLUA_ANSI
all: all-am

.SUFFIXES:
.SUFFIXES: .c .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign src/lua/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign src/lua/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

clean-noinstLIBRARIES:
	-test -z "$(noinst_LIBRARIES)" || rm -f $(noinst_LIBRARIES)
liblua.a: $(liblua_a_OBJECTS) $(liblua_a_DEPENDENCIES) $(EXTRA_liblua_a_DEPENDENCIES) 
	-rm -f liblua.a
	$(liblua_a_AR) liblua.a $(liblua_a_OBJECTS) $(liblua_a_LIBADD)
	$(RANLIB) liblua.a

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/liblua_a-lapi.Po
include ./$(DEPDIR)/liblua_a-lauxlib.Po
include ./$(DEPDIR)/liblua_a-lbaselib.Po
include ./$(DEPDIR)/liblua_a-lbitlib.Po
include ./$(DEPDIR)/liblua_a-lcode.Po
include ./$(DEPDIR)/liblua_a-lcorolib.Po
include ./$(DEPDIR)/liblua_a-lctype.Po
include ./$(DEPDIR)/liblua_a-ldblib.Po
include ./$(DEPDIR)/liblua_a-ldebug.Po
include ./$(DEPDIR)/liblua_a-ldo.Po
include ./$(DEPDIR)/liblua_a-ldump.Po
include ./$(DEPDIR)/liblua_a-lfunc.Po
include ./$(DEPDIR)/liblua_a-lgc.Po
include ./$(DEPDIR)/liblua_a-linit.Po
include ./$(DEPDIR)/liblua_a-liolib.Po
include ./$(DEPDIR)/liblua_a-llex.Po
include ./$(DEPDIR)/liblua_a-lmathlib.Po
include ./$(DEPDIR)/liblua_a-lmem.Po
include ./$(DEPDIR)/liblua_a-loadlib.Po
include ./$(DEPDIR)/liblua_a-lobject.Po
include ./$(DEPDIR)/liblua_a-lopcodes.Po
include ./$(DEPDIR)/liblua_a-loslib.Po
include ./$(DEPDIR)/liblua_a-lparser.Po
include ./$(DEPDIR)/liblua_a-lstate.Po
include ./$(DEPDIR)/liblua_a-lstring.Po
include ./$(DEPDIR)/liblua_a-lstrlib.Po
include ./$(DEPDIR)/liblua_a-ltable.Po
include ./$(DEPDIR)/liblua_a-ltablib.Po
include ./$(DEPDIR)/liblua_a-ltm.Po
include ./$(DEPDIR)/liblua_a-lundump.Po
include ./$(DEPDIR)/liblua_a-lvm.Po
include ./$(DEPDIR)/liblua_a-lzio.Po

.c.o:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

liblua_a-lapi.o: lapi.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lapi.o -MD -MP -MF $(DEPDIR)/liblua_a-lapi.Tpo -c -o liblua_a-lapi.o `test -f 'lapi.c' || echo '$(srcdir)/'`lapi.c
	$(am__mv) $(DEPDIR)/liblua_a-lapi.Tpo $(DEPDIR)/liblua_a-lapi.Po
#	source='lapi.c' object='liblua_a-lapi.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lapi.o `test -f 'lapi.c' || echo '$(srcdir)/'`lapi.c

liblua_a-lapi.obj: lapi.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lapi.obj -MD -MP -MF $(DEPDIR)/liblua_a-lapi.Tpo -c -o liblua_a-lapi.obj `if test -f 'lapi.c'; then $(CYGPATH_W) 'lapi.c'; else $(CYGPATH_W) '$(srcdir)/lapi.c'; fi`
	$(am__mv) $(DEPDIR)/liblua_a-lapi.Tpo $(DEPDIR)/liblua_a-lapi.Po
#	source='lapi.c' object='liblua_a-lapi.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lapi.obj `if test -f 'lapi.c'; then $(CYGPATH_W) 'lapi.c'; else $(CYGPATH_W) '$(srcdir)/lapi.c'; fi`

liblua_a-lcode.o: lcode.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lcode.o -MD -MP -MF $(DEPDIR)/liblua_a-lcode.Tpo -c -o liblua_a-lcode.o `test -f 'lcode.c' || echo '$(srcdir)/'`lcode.c
	$(am__mv) $(DEPDIR)/liblua_a-lcode.Tpo $(DEPDIR)/liblua_a-lcode.Po
#	source='lcode.c' object='liblua_a-lcode.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lcode.o `test -f 'lcode.c' || echo '$(srcdir)/'`lcode.c

liblua_a-lcode.obj: lcode.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lcode.obj -MD -MP -MF $(DEPDIR)/liblua_a-lcode.Tpo -c -o liblua_a-lcode.obj `if test -f 'lcode.c'; then $(CYGPATH_W) 'lcode.c'; else $(CYGPATH_W) '$(srcdir)/lcode.c'; fi`
	$(am__mv) $(DEPDIR)/liblua_a-lcode.Tpo $(DEPDIR)/liblua_a-lcode.Po
#	source='lcode.c' object='liblua_a-lcode.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lcode.obj `if test -f 'lcode.c'; then $(CYGPATH_W) 'lcode.c'; else $(CYGPATH_W) '$(srcdir)/lcode.c'; fi`

liblua_a-lctype.o: lctype.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lctype.o -MD -MP -MF $(DEPDIR)/liblua_a-lctype.Tpo -c -o liblua_a-lctype.o `test -f 'lctype.c' || echo '$(srcdir)/'`lctype.c
	$(am__mv) $(DEPDIR)/liblua_a-lctype.Tpo $(DEPDIR)/liblua_a-lctype.Po
#	source='lctype.c' object='liblua_a-lctype.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lctype.o `test -f 'lctype.c' || echo '$(srcdir)/'`lctype.c

liblua_a-lctype.obj: lctype.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lctype.obj -MD -MP -MF $(DEPDIR)/liblua_a-lctype.Tpo -c -o liblua_a-lctype.obj `if test -f 'lctype.c'; then $(CYGPATH_W) 'lctype.c'; else $(CYGPATH_W) '$(srcdir)/lctype.c'; fi`
	$(am__mv) $(DEPDIR)/liblua_a-lctype.Tpo $(DEPDIR)/liblua_a-lctype.Po
#	source='lctype.c' object='liblua_a-lctype.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lctype.obj `if test -f 'lctype.c'; then $(CYGPATH_W) 'lctype.c'; else $(CYGPATH_W) '$(srcdir)/lctype.c'; fi`

liblua_a-ldebug.o: ldebug.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-ldebug.o -MD -MP -MF $(DEPDIR)/liblua_a-ldebug.Tpo -c -o liblua_a-ldebug.o `test -f 'ldebug.c' || echo '$(srcdir)/'`ldebug.c
	$(am__mv) $(DEPDIR)/liblua_a-ldebug.Tpo $(DEPDIR)/liblua_a-ldebug.Po
#	source='ldebug.c' object='liblua_a-ldebug.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-ldebug.o `test -f 'ldebug.c' || echo '$(srcdir)/'`ldebug.c

liblua_a-ldebug.obj: ldebug.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-ldebug.obj -MD -MP -MF $(DEPDIR)/liblua_a-ldebug.Tpo -c -o liblua_a-ldebug.obj `if test -f 'ldebug.c'; then $(CYGPATH_W) 'ldebug.c'; else $(CYGPATH_W) '$(srcdir)/ldebug.c'; fi`
	$(am__mv) $(DEPDIR)/liblua_a-ldebug.Tpo $(DEPDIR)/liblua_a-ldebug.Po
#	source='ldebug.c' object='liblua_a-ldebug.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-ldebug.obj `if test -f 'ldebug.c'; then $(CYGPATH_W) 'ldebug.c'; else $(CYGPATH_W) '$(srcdir)/ldebug.c'; fi`

liblua_a-ldo.o: ldo.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-ldo.o -MD -MP -MF $(DEPDIR)/liblua_a-ldo.Tpo -c -o liblua_a-ldo.o `test -f 'ldo.c' || echo '$(srcdir)/'`ldo.c
	$(am__mv) $(DEPDIR)/liblua_a-ldo.Tpo $(DEPDIR)/liblua_a-ldo.Po
#	source='ldo.c' object='liblua_a-ldo.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-ldo.o `test -f 'ldo.c' || echo '$(srcdir)/'`ldo.c

liblua_a-ldo.obj: ldo.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-ldo.obj -MD -MP -MF $(DEPDIR)/liblua_a-ldo.Tpo -c -o liblua_a-ldo.obj `if test -f 'ldo.c'; then $(CYGPATH_W) 'ldo.c'; else $(CYGPATH_W) '$(srcdir)/ldo.c'; fi`
	$(am__mv) $(DEPDIR)/liblua_a-ldo.Tpo $(DEPDIR)/liblua_a-ldo.Po
#	source='ldo.c' object='liblua_a-ldo.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-ldo.obj `if test -f 'ldo.c'; then $(CYGPATH_W) 'ldo.c'; else $(CYGPATH_W) '$(srcdir)/ldo.c'; fi`

liblua_a-ldump.o: ldump.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-ldump.o -MD -MP -MF $(DEPDIR)/liblua_a-ldump.Tpo -c -o liblua_a-ldump.o `test -f 'ldump.c' || echo '$(srcdir)/'`ldump.c
	$(am__mv) $(DEPDIR)/liblua_a-ldump.Tpo $(DEPDIR)/liblua_a-ldump.Po
#	source='ldump.c' object='liblua_a-ldump.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-ldump.o `test -f 'ldump.c' || echo '$(srcdir)/'`ldump.c

liblua_a-ldump.obj: ldump.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-ldump.obj -MD -MP -MF $(DEPDIR)/liblua_a-ldump.Tpo -c -o liblua_a-ldump.obj `if test -f 'ldump.c'; then $(CYGPATH_W) 'ldump.c'; else $(CYGPATH_W) '$(srcdir)/ldump.c'; fi`
	$(am__mv) $(DEPDIR)/liblua_a-ldump.Tpo $(DEPDIR)/liblua_a-ldump.Po
#	source='ldump.c' object='liblua_a-ldump.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-ldump.obj `if test -f 'ldump.c'; then $(CYGPATH_W) 'ldump.c'; else $(CYGPATH_W) '$(srcdir)/ldump.c'; fi`

liblua_a-lfunc.o: lfunc.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lfunc.o -MD -MP -MF $(DEPDIR)/liblua_a-lfunc.Tpo -c -o liblua_a-lfunc.o `test -f 'lfunc.c' || echo '$(srcdir)/'`lfunc.c
	$(am__mv) $(DEPDIR)/liblua_a-lfunc.Tpo $(DEPDIR)/liblua_a-lfunc.Po
#	source='lfunc.c' object='liblua_a-lfunc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lfunc.o `test -f 'lfunc.c' || echo '$(srcdir)/'`lfunc.c

liblua_a-lfunc.obj: lfunc.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lfunc.obj -MD -MP -MF $(DEPDIR)/liblua_a-lfunc.Tpo -c -o liblua_a-lfunc.obj `if test -f 'lfunc.c'; then $(CYGPATH_W) 'lfunc.c'; else $(CYGPATH_W) '$(srcdir)/lfunc.c'; fi`
	$(am__mv) $(DEPDIR)/liblua_a-lfunc.Tpo $(DEPDIR)/liblua_a-lfunc.Po
#	source='lfunc.c' object='liblua_a-lfunc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lfunc.obj `if test -f 'lfunc.c'; then $(CYGPATH_W) 'lfunc.c'; else $(CYGPATH_W) '$(srcdir)/lfunc.c'; fi`

liblua_a-lgc.o: lgc.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lgc.o -MD -MP -MF $(DEPDIR)/liblua_a-lgc.Tpo -c -o liblua_a-lgc.o `test -f 'lgc.c' || echo '$(srcdir)/'`lgc.c
	$(am__mv) $(DEPDIR)/liblua_a-lgc.Tpo $(DEPDIR)/liblua_a-lgc.Po
#	source='lgc.c' object='liblua_a-lgc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lgc.o `test -f 'lgc.c' || echo '$(srcdir)/'`lgc.c

liblua_a-lgc.obj: lgc.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lgc.obj -MD -MP -MF $(DEPDIR)/liblua_a-lgc.Tpo -c -o liblua_a-lgc.obj `if test -f 'lgc.c'; then $(CYGPATH_W) 'lgc.c'; else $(CYGPATH_W) '$(srcdir)/lgc.c'; fi`
	$(am__mv) $(DEPDIR)/liblua_a-lgc.Tpo $(DEPDIR)/liblua_a-lgc.Po
#	source='lgc.c' object='liblua_a-lgc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lgc.obj `if test -f 'lgc.c'; then $(CYGPATH_W) 'lgc.c'; else $(CYGPATH_W) '$(srcdir)/lgc.c'; fi`

liblua_a-llex.o: llex.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-llex.o -MD -MP -MF $(DEPDIR)/liblua_a-llex.Tpo -c -o liblua_a-llex.o `test -f 'llex.c' || echo '$(srcdir)/'`llex.c
	$(am__mv) $(DEPDIR)/liblua_a-llex.Tpo $(DEPDIR)/liblua_a-llex.Po
#	source='llex.c' object='liblua_a-llex.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-llex.o `test -f 'llex.c' || echo '$(srcdir)/'`llex.c

liblua_a-llex.obj: llex.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-llex.obj -MD -MP -MF $(DEPDIR)/liblua_a-llex.Tpo -c -o liblua_a-llex.obj `if test -f 'llex.c'; then $(CYGPATH_W) 'llex.c'; else $(CYGPATH_W) '$(srcdir)/llex.c'; fi`
	$(am__mv) $(DEPDIR)/liblua_a-llex.Tpo $(DEPDIR)/liblua_a-llex.Po
#	source='llex.c' object='liblua_a-llex.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-llex.obj `if test -f 'llex.c'; then $(CYGPATH_W) 'llex.c'; else $(CYGPATH_W) '$(srcdir)/llex.c'; fi`

liblua_a-lmem.o: lmem.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lmem.o -MD -MP -MF $(DEPDIR)/liblua_a-lmem.Tpo -c -o liblua_a-lmem.o `test -f 'lmem.c' || echo '$(srcdir)/'`lmem.c
	$(am__mv) $(DEPDIR)/liblua_a-lmem.Tpo $(DEPDIR)/liblua_a-lmem.Po
#	source='lmem.c' object='liblua_a-lmem.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lmem.o `test -f 'lmem.c' || echo '$(srcdir)/'`lmem.c

liblua_a-lmem.obj: lmem.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lmem.obj -MD -MP -MF $(DEPDIR)/liblua_a-lmem.Tpo -c -o liblua_a-lmem.obj `if test -f 'lmem.c'; then $(CYGPATH_W) 'lmem.c'; else $(CYGPATH_W) '$(srcdir)/lmem.c'; fi`
	$(am__mv) $(DEPDIR)/liblua_a-lmem.Tpo $(DEPDIR)/liblua_a-lmem.Po
#	source='lmem.c' object='liblua_a-lmem.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lmem.obj `if test -f 'lmem.c'; then $(CYGPATH_W) 'lmem.c'; else $(CYGPATH_W) '$(srcdir)/lmem.c'; fi`

liblua_a-lobject.o: lobject.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lobject.o -MD -MP -MF $(DEPDIR)/liblua_a-lobject.Tpo -c -o liblua_a-lobject.o `test -f 'lobject.c' || echo '$(srcdir)/'`lobject.c
	$(am__mv) $(DEPDIR)/liblua_a-lobject.Tpo $(DEPDIR)/liblua_a-lobject.Po
#	source='lobject.c' object='liblua_a-lobject.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lobject.o `test -f 'lobject.c' || echo '$(srcdir)/'`lobject.c

liblua_a-lobject.obj: lobject.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lobject.obj -MD -MP -MF $(DEPDIR)/liblua_a-lobject.Tpo -c -o liblua_a-lobject.obj `if test -f 'lobject.c'; then $(CYGPATH_W) 'lobject.c'; else $(CYGPATH_W) '$(srcdir)/lobject.c'; fi`
	$(am__mv) $(DEPDIR)/liblua_a-lobject.Tpo $(DEPDIR)/liblua_a-lobject.Po
#	source='lobject.c' object='liblua_a-lobject.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lobject.obj `if test -f 'lobject.c'; then $(CYGPATH_W) 'lobject.c'; else $(CYGPATH_W) '$(srcdir)/lobject.c'; fi`

liblua_a-lopcodes.o: lopcodes.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lopcodes.o -MD -MP -MF $(DEPDIR)/liblua_a-lopcodes.Tpo -c -o liblua_a-lopcodes.o `test -f 'lopcodes.c' || echo '$(srcdir)/'`lopcodes.c
	$(am__mv) $(DEPDIR)/liblua_a-lopcodes.Tpo $(DEPDIR)/liblua_a-lopcodes.Po
#	source='lopcodes.c' object='liblua_a-lopcodes.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lopcodes.o `test -f 'lopcodes.c' || echo '$(srcdir)/'`lopcodes.c

liblua_a-lopcodes.obj: lopcodes.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lopcodes.obj -MD -MP -MF $(DEPDIR)/liblua_a-lopcodes.Tpo -c -o liblua_a-lopcodes.obj `if test -f 'lopcodes.c'; then $(CYGPATH_W) 'lopcodes.c'; else $(CYGPATH_W) '$(srcdir)/lopcodes.c'; fi`
	$(am__mv) $(DEPDIR)/liblua_a-lopcodes.Tpo $(DEPDIR)/liblua_a-lopcodes.Po
#	source='lopcodes.c' object='liblua_a-lopcodes.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lopcodes.obj `if test -f 'lopcodes.c'; then $(CYGPATH_W) 'lopcodes.c'; else $(CYGPATH_W) '$(srcdir)/lopcodes.c'; fi`

liblua_a-lparser.o: lparser.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lparser.o -MD -MP -MF $(DEPDIR)/liblua_a-lparser.Tpo -c -o liblua_a-lparser.o `test -f 'lparser.c' || echo '$(srcdir)/'`lparser.c
	$(am__mv) $(DEPDIR)/liblua_a-lparser.Tpo $(DEPDIR)/liblua_a-lparser.Po
#	source='lparser.c' object='liblua_a-lparser.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lparser.o `test -f 'lparser.c' || echo '$(srcdir)/'`lparser.c

liblua_a-lparser.obj: lparser.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lparser.obj -MD -MP -MF $(DEPDIR)/liblua_a-lparser.Tpo -c -o liblua_a-lparser.obj `if test -f 'lparser.c'; then $(CYGPATH_W) 'lparser.c'; else $(CYGPATH_W) '$(srcdir)/lparser.c'; fi`
	$(am__mv) $(DEPDIR)/liblua_a-lparser.Tpo $(DEPDIR)/liblua_a-lparser.Po
#	source='lparser.c' object='liblua_a-lparser.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lparser.obj `if test -f 'lparser.c'; then $(CYGPATH_W) 'lparser.c'; else $(CYGPATH_W) '$(srcdir)/lparser.c'; fi`

liblua_a-lstate.o: lstate.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lstate.o -MD -MP -MF $(DEPDIR)/liblua_a-lstate.Tpo -c -o liblua_a-lstate.o `test -f 'lstate.c' || echo '$(srcdir)/'`lstate.c
	$(am__mv) $(DEPDIR)/liblua_a-lstate.Tpo $(DEPDIR)/liblua_a-lstate.Po
#	source='lstate.c' object='liblua_a-lstate.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lstate.o `test -f 'lstate.c' || echo '$(srcdir)/'`lstate.c

liblua_a-lstate.obj: lstate.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lstate.obj -MD -MP -MF $(DEPDIR)/liblua_a-lstate.Tpo -c -o liblua_a-lstate.obj `if test -f 'lstate.c'; then $(CYGPATH_W) 'lstate.c'; else $(CYGPATH_W) '$(srcdir)/lstate.c'; fi`
	$(am__mv) $(DEPDIR)/liblua_a-lstate.Tpo $(DEPDIR)/liblua_a-lstate.Po
#	source='lstate.c' object='liblua_a-lstate.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lstate.obj `if test -f 'lstate.c'; then $(CYGPATH_W) 'lstate.c'; else $(CYGPATH_W) '$(srcdir)/lstate.c'; fi`

liblua_a-lstring.o: lstring.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lstring.o -MD -MP -MF $(DEPDIR)/liblua_a-lstring.Tpo -c -o liblua_a-lstring.o `test -f 'lstring.c' || echo '$(srcdir)/'`lstring.c
	$(am__mv) $(DEPDIR)/liblua_a-lstring.Tpo $(DEPDIR)/liblua_a-lstring.Po
#	source='lstring.c' object='liblua_a-lstring.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lstring.o `test -f 'lstring.c' || echo '$(srcdir)/'`lstring.c

liblua_a-lstring.obj: lstring.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lstring.obj -MD -MP -MF $(DEPDIR)/liblua_a-lstring.Tpo -c -o liblua_a-lstring.obj `if test -f 'lstring.c'; then $(CYGPATH_W) 'lstring.c'; else $(CYGPATH_W) '$(srcdir)/lstring.c'; fi`
	$(am__mv) $(DEPDIR)/liblua_a-lstring.Tpo $(DEPDIR)/liblua_a-lstring.Po
#	source='lstring.c' object='liblua_a-lstring.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lstring.obj `if test -f 'lstring.c'; then $(CYGPATH_W) 'lstring.c'; else $(CYGPATH_W) '$(srcdir)/lstring.c'; fi`

liblua_a-ltable.o: ltable.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-ltable.o -MD -MP -MF $(DEPDIR)/liblua_a-ltable.Tpo -c -o liblua_a-ltable.o `test -f 'ltable.c' || echo '$(srcdir)/'`ltable.c
	$(am__mv) $(DEPDIR)/liblua_a-ltable.Tpo $(DEPDIR)/liblua_a-ltable.Po
#	source='ltable.c' object='liblua_a-ltable.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-ltable.o `test -f 'ltable.c' || echo '$(srcdir)/'`ltable.c

liblua_a-ltable.obj: ltable.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-ltable.obj -MD -MP -MF $(DEPDIR)/liblua_a-ltable.Tpo -c -o liblua_a-ltable.obj `if test -f 'ltable.c'; then $(CYGPATH_W) 'ltable.c'; else $(CYGPATH_W) '$(srcdir)/ltable.c'; fi`
	$(am__mv) $(DEPDIR)/liblua_a-ltable.Tpo $(DEPDIR)/liblua_a-ltable.Po
#	source='ltable.c' object='liblua_a-ltable.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-ltable.obj `if test -f 'ltable.c'; then $(CYGPATH_W) 'ltable.c'; else $(CYGPATH_W) '$(srcdir)/ltable.c'; fi`

liblua_a-ltm.o: ltm.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-ltm.o -MD -MP -MF $(DEPDIR)/liblua_a-ltm.Tpo -c -o liblua_a-ltm.o `test -f 'ltm.c' || echo '$(srcdir)/'`ltm.c
	$(am__mv) $(DEPDIR)/liblua_a-ltm.Tpo $(DEPDIR)/liblua_a-ltm.Po
#	source='ltm.c' object='liblua_a-ltm.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-ltm.o `test -f 'ltm.c' || echo '$(srcdir)/'`ltm.c

liblua_a-ltm.obj: ltm.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-ltm.obj -MD -MP -MF $(DEPDIR)/liblua_a-ltm.Tpo -c -o liblua_a-ltm.obj `if test -f 'ltm.c'; then $(CYGPATH_W) 'ltm.c'; else $(CYGPATH_W) '$(srcdir)/ltm.c'; fi`
	$(am__mv) $(DEPDIR)/liblua_a-ltm.Tpo $(DEPDIR)/liblua_a-ltm.Po
#	source='ltm.c' object='liblua_a-ltm.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-ltm.obj `if test -f 'ltm.c'; then $(CYGPATH_W) 'ltm.c'; else $(CYGPATH_W) '$(srcdir)/ltm.c'; fi`

liblua_a-lundump.o: lundump.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lundump.o -MD -MP -MF $(DEPDIR)/liblua_a-lundump.Tpo -c -o liblua_a-lundump.o `test -f 'lundump.c' || echo '$(srcdir)/'`lundump.c
	$(am__mv) $(DEPDIR)/liblua_a-lundump.Tpo $(DEPDIR)/liblua_a-lundump.Po
#	source='lundump.c' object='liblua_a-lundump.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lundump.o `test -f 'lundump.c' || echo '$(srcdir)/'`lundump.c

liblua_a-lundump.obj: lundump.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lundump.obj -MD -MP -MF $(DEPDIR)/liblua_a-lundump.Tpo -c -o liblua_a-lundump.obj `if test -f 'lundump.c'; then $(CYGPATH_W) 'lundump.c'; else $(CYGPATH_W) '$(srcdir)/lundump.c'; fi`
	$(am__mv) $(DEPDIR)/liblua_a-lundump.Tpo $(DEPDIR)/liblua_a-lundump.Po
#	source='lundump.c' object='liblua_a-lundump.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lundump.obj `if test -f 'lundump.c'; then $(CYGPATH_W) 'lundump.c'; else $(CYGPATH_W) '$(srcdir)/lundump.c'; fi`

liblua_a-lvm.o: lvm.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lvm.o -MD -MP -MF $(DEPDIR)/liblua_a-lvm.Tpo -c -o liblua_a-lvm.o `test -f 'lvm.c' || echo '$(srcdir)/'`lvm.c
	$(am__mv) $(DEPDIR)/liblua_a-lvm.Tpo $(DEPDIR)/liblua_a-lvm.Po
#	source='lvm.c' object='liblua_a-lvm.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lvm.o `test -f 'lvm.c' || echo '$(srcdir)/'`lvm.c

liblua_a-lvm.obj: lvm.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lvm.obj -MD -MP -MF $(DEPDIR)/liblua_a-lvm.Tpo -c -o liblua_a-lvm.obj `if test -f 'lvm.c'; then $(CYGPATH_W) 'lvm.c'; else $(CYGPATH_W) '$(srcdir)/lvm.c'; fi`
	$(am__mv) $(DEPDIR)/liblua_a-lvm.Tpo $(DEPDIR)/liblua_a-lvm.Po
#	source='lvm.c' object='liblua_a-lvm.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lvm.obj `if test -f 'lvm.c'; then $(CYGPATH_W) 'lvm.c'; else $(CYGPATH_W) '$(srcdir)/lvm.c'; fi`

liblua_a-lzio.o: lzio.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lzio.o -MD -MP -MF $(DEPDIR)/liblua_a-lzio.Tpo -c -o liblua_a-lzio.o `test -f 'lzio.c' || echo '$(srcdir)/'`lzio.c
	$(am__mv) $(DEPDIR)/liblua_a-lzio.Tpo $(DEPDIR)/liblua_a-lzio.Po
#	source='lzio.c' object='liblua_a-lzio.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lzio.o `test -f 'lzio.c' || echo '$(srcdir)/'`lzio.c

liblua_a-lzio.obj: lzio.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lzio.obj -MD -MP -MF $(DEPDIR)/liblua_a-lzio.Tpo -c -o liblua_a-lzio.obj `if test -f 'lzio.c'; then $(CYGPATH_W) 'lzio.c'; else $(CYGPATH_W) '$(srcdir)/lzio.c'; fi`
	$(am__mv) $(DEPDIR)/liblua_a-lzio.Tpo $(DEPDIR)/liblua_a-lzio.Po
#	source='lzio.c' object='liblua_a-lzio.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lzio.obj `if test -f 'lzio.c'; then $(CYGPATH_W) 'lzio.c'; else $(CYGPATH_W) '$(srcdir)/lzio.c'; fi`

liblua_a-lauxlib.o: lauxlib.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lauxlib.o -MD -MP -MF $(DEPDIR)/liblua_a-lauxlib.Tpo -c -o liblua_a-lauxlib.o `test -f 'lauxlib.c' || echo '$(srcdir)/'`lauxlib.c
	$(am__mv) $(DEPDIR)/liblua_a-lauxlib.Tpo $(DEPDIR)/liblua_a-lauxlib.Po
#	source='lauxlib.c' object='liblua_a-lauxlib.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lauxlib.o `test -f 'lauxlib.c' || echo '$(srcdir)/'`lauxlib.c

liblua_a-lauxlib.obj: lauxlib.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lauxlib.obj -MD -MP -MF $(DEPDIR)/liblua_a-lauxlib.Tpo -c -o liblua_a-lauxlib.obj `if test -f 'lauxlib.c'; then $(CYGPATH_W) 'lauxlib.c'; else $(CYGPATH_W) '$(srcdir)/lauxlib.c'; fi`
	$(am__mv) $(DEPDIR)/liblua_a-lauxlib.Tpo $(DEPDIR)/liblua_a-lauxlib.Po
#	source='lauxlib.c' object='liblua_a-lauxlib.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lauxlib.obj `if test -f 'lauxlib.c'; then $(CYGPATH_W) 'lauxlib.c'; else $(CYGPATH_W) '$(srcdir)/lauxlib.c'; fi`

liblua_a-lbaselib.o: lbaselib.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lbaselib.o -MD -MP -MF $(DEPDIR)/liblua_a-lbaselib.Tpo -c -o liblua_a-lbaselib.o `test -f 'lbaselib.c' || echo '$(srcdir)/'`lbaselib.c
	$(am__mv) $(DEPDIR)/liblua_a-lbaselib.Tpo $(DEPDIR)/liblua_a-lbaselib.Po
#	source='lbaselib.c' object='liblua_a-lbaselib.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lbaselib.o `test -f 'lbaselib.c' || echo '$(srcdir)/'`lbaselib.c

liblua_a-lbaselib.obj: lbaselib.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lbaselib.obj -MD -MP -MF $(DEPDIR)/liblua_a-lbaselib.Tpo -c -o liblua_a-lbaselib.obj `if test -f 'lbaselib.c'; then $(CYGPATH_W) 'lbaselib.c'; else $(CYGPATH_W) '$(srcdir)/lbaselib.c'; fi`
	$(am__mv) $(DEPDIR)/liblua_a-lbaselib.Tpo $(DEPDIR)/liblua_a-lbaselib.Po
#	source='lbaselib.c' object='liblua_a-lbaselib.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lbaselib.obj `if test -f 'lbaselib.c'; then $(CYGPATH_W) 'lbaselib.c'; else $(CYGPATH_W) '$(srcdir)/lbaselib.c'; fi`

liblua_a-lbitlib.o: lbitlib.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lbitlib.o -MD -MP -MF $(DEPDIR)/liblua_a-lbitlib.Tpo -c -o liblua_a-lbitlib.o `test -f 'lbitlib.c' || echo '$(srcdir)/'`lbitlib.c
	$(am__mv) $(DEPDIR)/liblua_a-lbitlib.Tpo $(DEPDIR)/liblua_a-lbitlib.Po
#	source='lbitlib.c' object='liblua_a-lbitlib.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lbitlib.o `test -f 'lbitlib.c' || echo '$(srcdir)/'`lbitlib.c

liblua_a-lbitlib.obj: lbitlib.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lbitlib.obj -MD -MP -MF $(DEPDIR)/liblua_a-lbitlib.Tpo -c -o liblua_a-lbitlib.obj `if test -f 'lbitlib.c'; then $(CYGPATH_W) 'lbitlib.c'; else $(CYGPATH_W) '$(srcdir)/lbitlib.c'; fi`
	$(am__mv) $(DEPDIR)/liblua_a-lbitlib.Tpo $(DEPDIR)/liblua_a-lbitlib.Po
#	source='lbitlib.c' object='liblua_a-lbitlib.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lbitlib.obj `if test -f 'lbitlib.c'; then $(CYGPATH_W) 'lbitlib.c'; else $(CYGPATH_W) '$(srcdir)/lbitlib.c'; fi`

liblua_a-lcorolib.o: lcorolib.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lcorolib.o -MD -MP -MF $(DEPDIR)/liblua_a-lcorolib.Tpo -c -o liblua_a-lcorolib.o `test -f 'lcorolib.c' || echo '$(srcdir)/'`lcorolib.c
	$(am__mv) $(DEPDIR)/liblua_a-lcorolib.Tpo $(DEPDIR)/liblua_a-lcorolib.Po
#	source='lcorolib.c' object='liblua_a-lcorolib.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lcorolib.o `test -f 'lcorolib.c' || echo '$(srcdir)/'`lcorolib.c

liblua_a-lcorolib.obj: lcorolib.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lcorolib.obj -MD -MP -MF $(DEPDIR)/liblua_a-lcorolib.Tpo -c -o liblua_a-lcorolib.obj `if test -f 'lcorolib.c'; then $(CYGPATH_W) 'lcorolib.c'; else $(CYGPATH_W) '$(srcdir)/lcorolib.c'; fi`
	$(am__mv) $(DEPDIR)/liblua_a-lcorolib.Tpo $(DEPDIR)/liblua_a-lcorolib.Po
#	source='lcorolib.c' object='liblua_a-lcorolib.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lcorolib.obj `if test -f 'lcorolib.c'; then $(CYGPATH_W) 'lcorolib.c'; else $(CYGPATH_W) '$(srcdir)/lcorolib.c'; fi`

liblua_a-ldblib.o: ldblib.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-ldblib.o -MD -MP -MF $(DEPDIR)/liblua_a-ldblib.Tpo -c -o liblua_a-ldblib.o `test -f 'ldblib.c' || echo '$(srcdir)/'`ldblib.c
	$(am__mv) $(DEPDIR)/liblua_a-ldblib.Tpo $(DEPDIR)/liblua_a-ldblib.Po
#	source='ldblib.c' object='liblua_a-ldblib.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-ldblib.o `test -f 'ldblib.c' || echo '$(srcdir)/'`ldblib.c

liblua_a-ldblib.obj: ldblib.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-ldblib.obj -MD -MP -MF $(DEPDIR)/liblua_a-ldblib.Tpo -c -o liblua_a-ldblib.obj `if test -f 'ldblib.c'; then $(CYGPATH_W) 'ldblib.c'; else $(CYGPATH_W) '$(srcdir)/ldblib.c'; fi`
	$(am__mv) $(DEPDIR)/liblua_a-ldblib.Tpo $(DEPDIR)/liblua_a-ldblib.Po
#	source='ldblib.c' object='liblua_a-ldblib.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-ldblib.obj `if test -f 'ldblib.c'; then $(CYGPATH_W) 'ldblib.c'; else $(CYGPATH_W) '$(srcdir)/ldblib.c'; fi`

liblua_a-liolib.o: liolib.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-liolib.o -MD -MP -MF $(DEPDIR)/liblua_a-liolib.Tpo -c -o liblua_a-liolib.o `test -f 'liolib.c' || echo '$(srcdir)/'`liolib.c
	$(am__mv) $(DEPDIR)/liblua_a-liolib.Tpo $(DEPDIR)/liblua_a-liolib.Po
#	source='liolib.c' object='liblua_a-liolib.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-liolib.o `test -f 'liolib.c' || echo '$(srcdir)/'`liolib.c

liblua_a-liolib.obj: liolib.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-liolib.obj -MD -MP -MF $(DEPDIR)/liblua_a-liolib.Tpo -c -o liblua_a-liolib.obj `if test -f 'liolib.c'; then $(CYGPATH_W) 'liolib.c'; else $(CYGPATH_W) '$(srcdir)/liolib.c'; fi`
	$(am__mv) $(DEPDIR)/liblua_a-liolib.Tpo $(DEPDIR)/liblua_a-liolib.Po
#	source='liolib.c' object='liblua_a-liolib.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-liolib.obj `if test -f 'liolib.c'; then $(CYGPATH_W) 'liolib.c'; else $(CYGPATH_W) '$(srcdir)/liolib.c'; fi`

liblua_a-lmathlib.o: lmathlib.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lmathlib.o -MD -MP -MF $(DEPDIR)/liblua_a-lmathlib.Tpo -c -o liblua_a-lmathlib.o `test -f 'lmathlib.c' || echo '$(srcdir)/'`lmathlib.c
	$(am__mv) $(DEPDIR)/liblua_a-lmathlib.Tpo $(DEPDIR)/liblua_a-lmathlib.Po
#	source='lmathlib.c' object='liblua_a-lmathlib.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lmathlib.o `test -f 'lmathlib.c' || echo '$(srcdir)/'`lmathlib.c

liblua_a-lmathlib.obj: lmathlib.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lmathlib.obj -MD -MP -MF $(DEPDIR)/liblua_a-lmathlib.Tpo -c -o liblua_a-lmathlib.obj `if test -f 'lmathlib.c'; then $(CYGPATH_W) 'lmathlib.c'; else $(CYGPATH_W) '$(srcdir)/lmathlib.c'; fi`
	$(am__mv) $(DEPDIR)/liblua_a-lmathlib.Tpo $(DEPDIR)/liblua_a-lmathlib.Po
#	source='lmathlib.c' object='liblua_a-lmathlib.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lmathlib.obj `if test -f 'lmathlib.c'; then $(CYGPATH_W) 'lmathlib.c'; else $(CYGPATH_W) '$(srcdir)/lmathlib.c'; fi`

liblua_a-loslib.o: loslib.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-loslib.o -MD -MP -MF $(DEPDIR)/liblua_a-loslib.Tpo -c -o liblua_a-loslib.o `test -f 'loslib.c' || echo '$(srcdir)/'`loslib.c
	$(am__mv) $(DEPDIR)/liblua_a-loslib.Tpo $(DEPDIR)/liblua_a-loslib.Po
#	source='loslib.c' object='liblua_a-loslib.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-loslib.o `test -f 'loslib.c' || echo '$(srcdir)/'`loslib.c

liblua_a-loslib.obj: loslib.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-loslib.obj -MD -MP -MF $(DEPDIR)/liblua_a-loslib.Tpo -c -o liblua_a-loslib.obj `if test -f 'loslib.c'; then $(CYGPATH_W) 'loslib.c'; else $(CYGPATH_W) '$(srcdir)/loslib.c'; fi`
	$(am__mv) $(DEPDIR)/liblua_a-loslib.Tpo $(DEPDIR)/liblua_a-loslib.Po
#	source='loslib.c' object='liblua_a-loslib.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-loslib.obj `if test -f 'loslib.c'; then $(CYGPATH_W) 'loslib.c'; else $(CYGPATH_W) '$(srcdir)/loslib.c'; fi`

liblua_a-lstrlib.o: lstrlib.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lstrlib.o -MD -MP -MF $(DEPDIR)/liblua_a-lstrlib.Tpo -c -o liblua_a-lstrlib.o `test -f 'lstrlib.c' || echo '$(srcdir)/'`lstrlib.c
	$(am__mv) $(DEPDIR)/liblua_a-lstrlib.Tpo $(DEPDIR)/liblua_a-lstrlib.Po
#	source='lstrlib.c' object='liblua_a-lstrlib.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lstrlib.o `test -f 'lstrlib.c' || echo '$(srcdir)/'`lstrlib.c

liblua_a-lstrlib.obj: lstrlib.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-lstrlib.obj -MD -MP -MF $(DEPDIR)/liblua_a-lstrlib.Tpo -c -o liblua_a-lstrlib.obj `if test -f 'lstrlib.c'; then $(CYGPATH_W) 'lstrlib.c'; else $(CYGPATH_W) '$(srcdir)/lstrlib.c'; fi`
	$(am__mv) $(DEPDIR)/liblua_a-lstrlib.Tpo $(DEPDIR)/liblua_a-lstrlib.Po
#	source='lstrlib.c' object='liblua_a-lstrlib.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-lstrlib.obj `if test -f 'lstrlib.c'; then $(CYGPATH_W) 'lstrlib.c'; else $(CYGPATH_W) '$(srcdir)/lstrlib.c'; fi`

liblua_a-ltablib.o: ltablib.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-ltablib.o -MD -MP -MF $(DEPDIR)/liblua_a-ltablib.Tpo -c -o liblua_a-ltablib.o `test -f 'ltablib.c' || echo '$(srcdir)/'`ltablib.c
	$(am__mv) $(DEPDIR)/liblua_a-ltablib.Tpo $(DEPDIR)/liblua_a-ltablib.Po
#	source='ltablib.c' object='liblua_a-ltablib.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-ltablib.o `test -f 'ltablib.c' || echo '$(srcdir)/'`ltablib.c

liblua_a-ltablib.obj: ltablib.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-ltablib.obj -MD -MP -MF $(DEPDIR)/liblua_a-ltablib.Tpo -c -o liblua_a-ltablib.obj `if test -f 'ltablib.c'; then $(CYGPATH_W) 'ltablib.c'; else $(CYGPATH_W) '$(srcdir)/ltablib.c'; fi`
	$(am__mv) $(DEPDIR)/liblua_a-ltablib.Tpo $(DEPDIR)/liblua_a-ltablib.Po
#	source='ltablib.c' object='liblua_a-ltablib.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-ltablib.obj `if test -f 'ltablib.c'; then $(CYGPATH_W) 'ltablib.c'; else $(CYGPATH_W) '$(srcdir)/ltablib.c'; fi`

liblua_a-loadlib.o: loadlib.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-loadlib.o -MD -MP -MF $(DEPDIR)/liblua_a-loadlib.Tpo -c -o liblua_a-loadlib.o `test -f 'loadlib.c' || echo '$(srcdir)/'`loadlib.c
	$(am__mv) $(DEPDIR)/liblua_a-loadlib.Tpo $(DEPDIR)/liblua_a-loadlib.Po
#	source='loadlib.c' object='liblua_a-loadlib.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-loadlib.o `test -f 'loadlib.c' || echo '$(srcdir)/'`loadlib.c

liblua_a-loadlib.obj: loadlib.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-loadlib.obj -MD -MP -MF $(DEPDIR)/liblua_a-loadlib.Tpo -c -o liblua_a-loadlib.obj `if test -f 'loadlib.c'; then $(CYGPATH_W) 'loadlib.c'; else $(CYGPATH_W) '$(srcdir)/loadlib.c'; fi`
	$(am__mv) $(DEPDIR)/liblua_a-loadlib.Tpo $(DEPDIR)/liblua_a-loadlib.Po
#	source='loadlib.c' object='liblua_a-loadlib.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-loadlib.obj `if test -f 'loadlib.c'; then $(CYGPATH_W) 'loadlib.c'; else $(CYGPATH_W) '$(srcdir)/loadlib.c'; fi`

liblua_a-linit.o: linit.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-linit.o -MD -MP -MF $(DEPDIR)/liblua_a-linit.Tpo -c -o liblua_a-linit.o `test -f 'linit.c' || echo '$(srcdir)/'`linit.c
	$(am__mv) $(DEPDIR)/liblua_a-linit.Tpo $(DEPDIR)/liblua_a-linit.Po
#	source='linit.c' object='liblua_a-linit.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-linit.o `test -f 'linit.c' || echo '$(srcdir)/'`linit.c

liblua_a-linit.obj: linit.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT liblua_a-linit.obj -MD -MP -MF $(DEPDIR)/liblua_a-linit.Tpo -c -o liblua_a-linit.obj `if test -f 'linit.c'; then $(CYGPATH_W) 'linit.c'; else $(CYGPATH_W) '$(srcdir)/linit.c'; fi`
	$(am__mv) $(DEPDIR)/liblua_a-linit.Tpo $(DEPDIR)/liblua_a-linit.Po
#	source='linit.c' object='liblua_a-linit.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(liblua_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o liblua_a-linit.obj `if test -f 'linit.c'; then $(CYGPATH_W) 'linit.c'; else $(CYGPATH_W) '$(srcdir)/linit.c'; fi`

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LIBRARIES)
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-noinstLIBRARIES mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-noinstLIBRARIES ctags distclean distclean-compile \
	distclean-generic distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags uninstall \
	uninstall-am


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
